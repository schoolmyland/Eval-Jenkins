apiVersion: apps/v1
kind: Deployment
metadata:
  name: movie-db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: movie-db
  template:
    metadata:
      labels:
        app: movie-db
    spec:
      containers:
      - name: movie-db
        image: {{ .Values.db.deployment.image }}
        env:
        - name: POSTGRES_USER
          value: {{ .Values.db.movie.username }}
        - name: POSTGRES_PASSWORD
          value: {{ .Values.db.movie.password }}
        - name: POSTGRES_DB
          value: {{ .Values.db.movie.db }}
        volumeMounts:
        - name: postgres-data-movie
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: postgres-data-movie
        persistentVolumeClaim:
          claimName: postgres-data-movie
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cast-db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cast-db
  template:
    metadata:
      labels:
        app: cast-db
    spec:
      containers:
      - name: cast-db
        image: {{ .Values.db.deployment.image }}
        env:
        - name: POSTGRES_USER
          value: {{ .Values.db.cast.username }}
        - name: POSTGRES_PASSWORD
          value: {{ .Values.db.cast.password }}
        - name: POSTGRES_DB
          value: {{ .Values.db.cast.db }}
        volumeMounts:
        - name: postgres-data-cast
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: postgres-data-cast
        persistentVolumeClaim:
          claimName: postgres-data-cast
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cast
  namespace: {{ .Values.namespace }}
  labels:
    app: cast
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cast
  template:
    metadata:
      labels:
        network/apinetwork: "true"
        app: cast
    spec:
      containers:
        - image: {{ .Values.cast.deployment.image }}
          imagePullPolicy: Always  
          name: cast
          command: ["uvicorn", "app.main:app", "--reload", "--host", "0.0.0.0", "--port", "8000"]
          ports:
            - containerPort: {{ .Values.cast.service.port }}
          env:
          - name: DATABASE_URI
            value: {{ .Values.cast.env.DATABASE_URI }}
      restartPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: movie
  namespace: {{ .Values.namespace }}
  labels:
    app: movie
spec:
  replicas: 1
  selector:
    matchLabels:
      app: movie
  template:
    metadata:
      labels:
        network/apinetwork: "true"
        app: movie
    spec:
      containers:
        - image: {{ .Values.movie.deployment.image }}
          imagePullPolicy: Always  
          command: ["uvicorn", "app.main:app", "--reload", "--host", "0.0.0.0", "--port", "8000"]
          name: movie
          ports:
            - containerPort: {{ .Values.movie.service.port }}
          env:
          - name: DATABASE_URI
            value: {{ .Values.movie.env.DATABASE_URI }}
          - name: CAST_SERVICE_HOST_URL
            value: {{ .Values.movie.env.CAST_SERVICE_HOST_URL }}
      restartPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  namespace: {{ .Values.namespace }}
  labels:
    app: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        network/apinetwork: "true"
        app: nginx
    spec:
      containers:
        - image: {{ .Values.nginx.deployment.image }}
          imagePullPolicy: Always  
          name: nginx
          ports:
            - containerPort: {{ .Values.nginx.service.port }}
        volumeMounts:
        - name: nginx-config-volume
          mountPath: /etc/nginx/conf.d
      volumes:
      - name: nginx-config-volume
        configMap:
          name: nginx-config
      restartPolicy: Always
