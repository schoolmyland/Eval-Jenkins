apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: db
  namespace: {{ .Values.namespace }}
  labels:
    app: db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: db
  serviceName: db
  template:
    metadata:
      labels:
        app: db
    spec:
      containers:
        - env:
            - name: PGSQL_ROOT_PASSWORD
              value: cast_db_dev     
            - name: POSTGRES_DB
              value: storedb
            - name: POSTGRES_HOST_AUTH_METHOD
              value: trust
            - name: POSTGRES_USER
              value: 
          image: {{ .Values.db.deployment.image }}
          name: db
          ports:
            - containerPort: {{ .Values.db.service.port }}
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
      restartPolicy: Always
      volumes:
       - name: postgres-data
         persistentVolumeClaim:
           claimName: postgres-data
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cast
  namespace: {{ .Values.namespace }}
  labels:
    app: cast
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cast
  template:
    metadata:
      labels:
        network/apinetwork: "true"
        app: cast
    spec:
      containers:
        - image: {{ .Values.cast.deployment.image }}
          imagePullPolicy: Always  
          name: cast
          command: ["uvicorn", "app.main:app", "--reload", "--host", "0.0.0.0", "--port", "8000"]
          ports:
            - containerPort: {{ .Values.cast.service.port }}
          env:
          - name: DATABASE_URI
            value: {{ .Values.cast.env.DATABASE_URI }}
      restartPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: movie
  namespace: {{ .Values.namespace }}
  labels:
    app: fastapi
spec:
  replicas: 1
  selector:
    matchLabels:
      app: movie
  template:
    metadata:
      labels:
        network/apinetwork: "true"
        app: movie
    spec:
      containers:
        - image: {{ .Values.movie.deployment.image }}
          imagePullPolicy: Always  
          command: ["uvicorn", "app.main:app", "--reload", "--host", "0.0.0.0", "--port", "8000"]
          name: movie
          ports:
            - containerPort: {{ .Values.movie.service.port }}
          env:
          - name: DATABASE_URI
            value: {{ .Values.movie.env.DATABASE_URI }}
          - name: CAST_SERVICE_HOST_URL
            value: {{ .Values.movie.env.CAST_SERVICE_HOST_URL }}
      restartPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  namespace: {{ .Values.namespace }}
  labels:
    app: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        network/apinetwork: "true"
        app: nginx
    spec:
      containers:
        - image: {{ .Values.nginx.deployment.image }}
          imagePullPolicy: Always  
          name: nginx
          ports:
            - containerPort: {{ .Values.nginx.service.port }}
        volumeMounts:
        - name: nginx-config-volume
          mountPath: /etc/nginx/conf.d
      volumes:
      - name: nginx-config-volume
        configMap:
          name: nginx-config
      restartPolicy: Always
